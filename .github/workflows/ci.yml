name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
    
    - name: Setup PowerShell and Prerequisites
      shell: powershell
      run: |
        Write-Host "Checking PowerShell availability..."
        $pwshAvailable = Get-Command pwsh -ErrorAction SilentlyContinue
        if ($pwshAvailable) {
          Write-Host "PowerShell Core is available"
          pwsh --version
        } else {
          Write-Host "Using Windows PowerShell for build"
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        }
    
    - name: Run Tests (No GUI Dependencies)
      shell: powershell
      run: |
        # Run build script which now supports both PowerShell Core and Windows PowerShell
        .\build_tests_only.bat
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: |
          imgui_opengl_glad/build_tests/Testing/**/*.xml
          imgui_opengl_glad/build_tests/Testing/**/*.log

  build-and-test-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build pkg-config
        # Note: No GUI dependencies needed for tests-only build
    
    - name: Configure CMake (Tests Only)
      working-directory: imgui_opengl_glad
      run: |
        cmake -B build_tests -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DWITH_IMGUI=OFF -G Ninja
    
    - name: Build Tests
      working-directory: imgui_opengl_glad
      run: |
        cmake --build build_tests --target unit_tests
    
    - name: Run Tests
      working-directory: imgui_opengl_glad
      run: |
        cd build_tests
        ctest --verbose --output-on-failure
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-linux
        path: |
          imgui_opengl_glad/build_tests/Testing/**/*.xml
          imgui_opengl_glad/build_tests/Testing/**/*.log

  code-quality:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install LLVM (includes clang-format)
      run: |
        # Check if LLVM/clang-format is already available in common locations
        $clangFormatPaths = @(
          "clang-format",
          "C:\Program Files\LLVM\bin\clang-format.exe",
          "$env:ProgramFiles\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\bin\clang-format.exe"
        )
        
        $found = $false
        foreach ($path in $clangFormatPaths) {
          try {
            if ($path -eq "clang-format") {
              $result = & $path --version 2>$null
              if ($LASTEXITCODE -eq 0) {
                Write-Host "clang-format found in PATH: $result"
                $found = $true
                break
              }
            } elseif (Test-Path $path) {
              $result = & $path --version
              Write-Host "clang-format found at: $path - $result"
              $found = $true
              break
            }
          } catch { continue }
        }
        
        if (-not $found) {
          Write-Host "Installing LLVM via Chocolatey..."
          choco install llvm -y --no-progress
          Write-Host "LLVM installed"
        } else {
          Write-Host "clang-format is already available"
        }
    
    - name: Check code formatting
      shell: powershell
      run: |
        # Find clang-format executable
        $clangFormatPaths = @(
          "clang-format",
          "C:\Program Files\LLVM\bin\clang-format.exe", 
          "$env:ProgramFiles\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\bin\clang-format.exe"
        )
        
        $clangFormat = $null
        foreach ($path in $clangFormatPaths) {
          try {
            if ($path -eq "clang-format") {
              $result = & $path --version 2>$null
              if ($LASTEXITCODE -eq 0) { $clangFormat = $path; break }
            } elseif (Test-Path $path) {
              $clangFormat = $path; break
            }
          } catch { continue }
        }
        
        if (-not $clangFormat) {
          Write-Error "clang-format not found after installation"
          exit 1
        }
        
        Write-Host "Using clang-format: $clangFormat"
        
        # Find and format check only our core and ui files (exclude third-party libraries)
        $coreFiles = Get-ChildItem -Path "imgui_opengl_glad\core" -Include "*.cpp","*.h" -Recurse
        $uiFiles = Get-ChildItem -Path "imgui_opengl_glad\ui" -Include "*.cpp","*.h" -Recurse
        $testFiles = Get-ChildItem -Path "imgui_opengl_glad\tests" -Include "*.cpp","*.h" -Recurse
        $mainFile = Get-Item -Path "imgui_opengl_glad\main.cpp" -ErrorAction SilentlyContinue
        
        $files = @()
        $files += $coreFiles
        $files += $uiFiles
        $files += $testFiles
        if ($mainFile) { $files += $mainFile }
        
        if ($files.Count -gt 0) {
          Write-Host "Checking formatting for our source files:"
          $files | ForEach-Object { Write-Host "  $_" }
          
          $formatErrors = 0
          $files | ForEach-Object { 
            Write-Host "Checking: $($_.FullName)"
            $result = & $clangFormat --dry-run $_.FullName 2>&1
            if ($LASTEXITCODE -ne 0) { 
              Write-Host "Formatting issues found in $($_.FullName):" -ForegroundColor Red
              Write-Host $result -ForegroundColor Red
              $formatErrors++
            }
          }
          
          if ($formatErrors -gt 0) {
            Write-Error "Found $formatErrors files with formatting issues"
            exit 1
          } else {
            Write-Host "Code formatting check completed successfully" -ForegroundColor Green
          }
        } else {
          Write-Host "No source files found to check"
        }
    
    - name: Run static analysis (cppcheck) 
      run: |
        choco install cppcheck
        # Use full path since PATH may not be updated immediately after installation
        & "C:\Program Files\Cppcheck\cppcheck.exe" --enable=warning,performance,portability --error-exitcode=1 --suppress=missingIncludeSystem --suppress=unusedFunction --suppress=preprocessorErrorDirective --suppress=normalCheckLevelMaxBranches --inline-suppr --std=c++17 --language=c++ --platform=win64 --template="{file}({line}): {severity}: {message} [{id}]" imgui_opengl_glad/core/ imgui_opengl_glad/ui/ imgui_opengl_glad/plugins/

  build-gui-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
    
    - name: Setup vcpkg
      shell: powershell
      run: |
        Write-Host "Setting up vcpkg for GUI dependencies..."
        # Create the directory structure that build_gui.bat expects
        New-Item -ItemType Directory -Path "c:\dvlp" -Force -ErrorAction SilentlyContinue
        
        if (-not (Test-Path "c:\dvlp\vcpkg\vcpkg.exe")) {
          Write-Host "Installing vcpkg at expected location: c:\dvlp\vcpkg..."
          git clone https://github.com/Microsoft/vcpkg.git c:\dvlp\vcpkg
          c:\dvlp\vcpkg\bootstrap-vcpkg.bat
        } else {
          Write-Host "vcpkg already exists at c:\dvlp\vcpkg"
        }
        
        # Verify vcpkg is working
        c:\dvlp\vcpkg\vcpkg.exe version
    
    - name: Install vcpkg dependencies
      shell: powershell
      run: |
        Write-Host "Installing GUI dependencies with vcpkg..."
        # Install the dependencies from vcpkg.json
        c:\dvlp\vcpkg\vcpkg.exe install --triplet x64-windows
        
        # Verify installations
        Write-Host "Verifying installed packages..."
        c:\dvlp\vcpkg\vcpkg.exe list
    
    - name: Build GUI Application
      shell: powershell
      run: |
        # Run the GUI build script for integration testing
        Write-Host "Building GUI application using build_gui.bat..."
        .\build_gui.bat
    
    - name: Upload GUI build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gui-build-artifacts-windows
        path: |
          imgui_opengl_glad/build_gui/Debug/*.exe
          imgui_opengl_glad/build_gui/Debug/*.dll
          imgui_opengl_glad/build_gui/plugins/Debug/*.dll
        retention-days: 7
    
    - name: Verify GUI executable
      shell: powershell
      run: |
        $exePath = "imgui_opengl_glad\build_gui\Debug\emsp.exe"
        if (Test-Path $exePath) {
          $fileInfo = Get-Item $exePath
          Write-Host "✅ GUI executable built successfully: $($fileInfo.Name)" -ForegroundColor Green
          Write-Host "   Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB" -ForegroundColor Green
          Write-Host "   Last Modified: $($fileInfo.LastWriteTime)" -ForegroundColor Green
        } else {
          Write-Error "❌ GUI executable not found at expected location: $exePath"
          exit 1
        }
